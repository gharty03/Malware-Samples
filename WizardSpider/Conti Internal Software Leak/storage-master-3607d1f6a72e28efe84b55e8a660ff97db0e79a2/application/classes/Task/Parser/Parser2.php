<?php defined('SYSPATH') or die('No direct script access.');

class Task_Parser_Parser2 extends Minion_Task{
    protected function _execute(array $params)
    {
	    $list_files = scandir('/home/csv');
	    unset(
		    $list_files[0],
	        $list_files[1]
	    );

	    foreach($list_files as $file){
		    $key_word = substr($file, 0, -4);
		    $id_list = file('/home/csv/'.$file);

		    $query = $this->getQuery($id_list);
		    $fp = fopen('/home/csv_result/'.$key_word.'.csv', 'w');
		    foreach($query as $item){
			    $tmp_array = array();
			    foreach($item as $key => $item2){
				    if($key != 'data'){
					    $tmp_array[] = $item2;
				    }else{
					    $data_string = '';
					    $data = json_decode($item2, true);
					    foreach($data as $k => $d){
						    $data_string .= $k.": ".$d."\n\r";
					    }
					    $tmp_array[] = $data_string;
				    }
			    }
			    fputcsv($fp, $tmp_array);
		    }

		    fclose($fp);
	    }
    }

    private function getQuery($id_list){
	    $clientName = DB::expr("upper(lpad(to_hex(cid1), 16, '0') || lpad(to_hex(cid0), 16, '0')) AS client");
        return DB::select('l.id', $clientName, 'l.referrer', 'l.link', 'l.datetime', 'l.data')
            ->from(['logpost', 'l'])
            ->join(['clients', 't'])
            ->on('l.client_id', '=', 't.id')
            ->where('l.id', 'IN', $id_list)
            ->execute()
            ->as_array();
    }
}