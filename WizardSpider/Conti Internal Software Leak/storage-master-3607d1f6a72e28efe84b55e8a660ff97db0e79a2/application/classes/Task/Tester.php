<?php defined('SYSPATH') or die('No direct script access.');


class Task_Tester extends Minion_Task{

    protected function _execute(array $params){
//        $ip = '95.101.243.145';
//        $url = 'http://ipinfo.io/'.$ip.'/json';
//        $response = Request::factory($url)
//            ->method(Request::GET)
//            ->execute()
//            ->body();
//        dd($response);

    }

    private static function parseByClient(){
//        $records = DB::select('data', 'link')->from('logpost')->where('client_id', '=', 5604)->execute()->as_array();
//        $fp = fopen('application/6C97ACFD1F3AE6194C594EB33B7C086D.csv', 'w');
//        foreach ($records as $key => $logpost){
//            $logpost['data'] = json_decode($logpost['data'], true);
//
//            if(isset($logpost['data']['Cookie'])){
//                unset($logpost['data']['Cookie']);
//            }
//
//            $logpost['data'] = json_encode($logpost['data']);
//            fputcsv($fp, $logpost);
//        }
//
//        fclose($fp);
    }

    private static function parseIpAndDatapostInDirectoryByDate(){
        $sphinxql = new SphinxQL();
        $queryLogpost = $sphinxql->new_query()->add_index('logpost');
        $test = $queryLogpost->add_field('id')
            ->add_field('client_id')
            ->search(' @link (*ocsp*) ')
//            ->search(' @link (*chase com auth fcc login*) ')
            ->group_by('client_id')
            ->group_order('datetime', 'desc')
            ->order('datetime', 'desc')
//            ->option('max_matches', '1000000')
            ->option('max_matches', '100')
            ->offset(0)
//            ->limit(1000000)
            ->limit(100)
            ->executeOrFail();

        $base_path = APPPATH.'parser/';
        if(!file_exists($base_path)){
            mkdir($base_path);
        }

        foreach($test['data'] as $k => $d){
            Minion_CLI::write($k.'/'.(count($test['data'])-1));
            $text = '';
            $text .= DB::select('ip')
                ->from('clients')
                ->where('id','=',$d['client_id'])
                ->execute()
                ->as_array()[0]['ip'];

            $text .= PHP_EOL;
            $text .= PHP_EOL;

            $logpost = DB::select('datetime', 'data')
                ->from('logpost')
                ->where('id','=',$d['id'])
                ->execute()
                ->as_array()[0];

            $data = json_decode($logpost['data'], true);
            if(isset($data['Unknown'])){
                $text .= $data['Unknown'];
                $datetime = (new DateTime($logpost['datetime']))->format('MY');

                if(!file_exists($base_path.$datetime)){
                    mkdir($base_path.$datetime);
                }

                file_put_contents($base_path.$datetime.'/'.$k.'.txt', $text);
            }
        }
    }
}